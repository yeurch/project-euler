# Highly divisible triangular number
# Problem 12

# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The
# first ten terms would be:
#       1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#    1: 1
#    3: 1,3
#    6: 1,2,3,6
#   10: 1,2,5,10
#   15: 1,3,5,15
#   21: 1,3,7,21
#   28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred
# divisors?

import time

start = time.time()

def natural_numbers():
    count = 0
    natural = 0
    while True:
        count += 1
        natural += count
        yield natural

# Going to brute force this with Trial Division
target = 500
result = 0
for nat_num in natural_numbers():
    if nat_num > target:
        divisors = 0
        sqrt = int(nat_num**0.5)
        for i in range(2,sqrt):
            if nat_num % i == 0:
                divisors += 2
        if sqrt * sqrt == nat_num:
            divisors -= 1 # remove duplicate if it's a perfect square
        if divisors > target:
            result = nat_num
            break

print ('Result is {}'.format(result))

end = time.time()
print ('Time taken: {:.6f}s'.format(end - start))
